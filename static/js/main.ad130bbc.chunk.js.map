{"version":3,"sources":["App.js","index.js"],"names":["App","props","startCountdown","state","minutes","seconds","totalPercentage","Number","titleHTML","document","getElementById","setState","isTimerActive","timer","setInterval","newMinute","newSecond","calcPercentage","percentage","Math","floor","minuteStr","secondStr","innerText","slice","length","clearInterval","alert","pauseTimer","stopTimer","addQuantity","min","togleSearch","after","search","changeTimeBySearch","value","array","split","handleChange","target","textSearch","searchEnter","event","keyCode","test","this","className","strokeWidth","styles","buildStyles","pathColor","trailColor","onClick","disabled","type","name","placeholder","onChange","onKeyUp","Component","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ad130bbc.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport { BsPlayFill, BsPauseFill, BsStopFill } from \"react-icons/bs\";\nimport { FaSearch } from 'react-icons/fa'\nimport 'react-circular-progressbar/dist/styles.css';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      minutes: '5',\n      seconds: '0',\n      percentage: 0,\n      isTimerActive: false,\n      search: false,\n      textSearch: '',\n    }\n  }\n\n  startCountdown = () => {\n    const { minutes, seconds } = this.state;\n    const totalPercentage = Number(minutes) * 60 + Number(seconds);\n    const titleHTML = document.getElementById('title');\n\n    this.setState({ isTimerActive: true })\n    this.timer = setInterval(() => {\n      const { minutes, seconds } = this.state;\n      let newMinute = Number(minutes);\n      let newSecond = Number(seconds) - 1;\n\n      if (newSecond <= 0 && newMinute !== 0) {\n        newMinute -= 1;\n        newSecond = 59;\n      }\n\n      const calcPercentage = ((totalPercentage - (newMinute * 60 + newSecond)) / totalPercentage) * 100\n      const percentage = Math.floor(calcPercentage * 10) / 10;\n\n      const minuteStr = `${newMinute}`\n      const secondStr = `${newSecond}`\n\n      titleHTML.innerText = `${'00'.slice(minuteStr.length) + minuteStr}:${'00'.slice(secondStr.length) + secondStr} - Timer`\n      this.setState({ minutes: minuteStr, seconds: secondStr, percentage})\n\n      if (newMinute === 0 && newSecond === 0) {\n        this.setState({ isTimerActive: false })\n        clearInterval(this.timer);\n        alert('The Countdown is over!')\n        return;\n      }\n\n    }, 1000)\n  }\n\n  pauseTimer = () => {\n    this.setState({ isTimerActive: false })\n    clearInterval(this.timer)\n  }\n\n  stopTimer = () => {\n    const titleHTML = document.getElementById('title');\n    titleHTML.innerText = `05:00 - Timer`\n    this.setState({ isTimerActive: false, minutes: '5', seconds: '0', percentage: 0 })\n    clearInterval(this.timer)\n  }\n\n  addQuantity = (min) => {\n    const { minutes, seconds } = this.state;\n    let newMinute = Number(minutes) + min;\n    let newSecond = seconds\n\n    if (newMinute >= 60) {\n      newMinute = 59\n      newSecond = 59\n    }\n\n    this.setState({ minutes: `${newMinute}`, seconds: `${newSecond}` });\n  }\n\n  togleSearch = () => {\n    this.setState((after) => ({ search: !after.search }))\n  }\n\n  changeTimeBySearch = (value) => {\n    const array = value.split(':');\n    let minutes = array[0];\n    let seconds = array[1];\n\n    this.setState({ minutes, seconds })\n  }\n\n  handleChange = ({ target: { value } }) => {\n\n    if (value.length === 2) {\n      value += ':'\n    }\n\n    if (value.length <= 5) {\n      this.setState({ textSearch: value })\n    }\n\n  }\n\n  searchEnter = (event) => {\n    const { textSearch } = this.state;\n    const ENTER_KEYCODE = 13;\n    const regex = /^\\d{2}:\\d{2}$/s\n       \n    if (event.keyCode === ENTER_KEYCODE && regex.test(textSearch)) {\n      this.changeTimeBySearch(textSearch)\n    }\n    \n  }\n\n  render() {\n    const { percentage, minutes, seconds, isTimerActive, search, textSearch } = this.state;\n    return (\n      <>\n        <div className=\"progressbar\">\n          <CircularProgressbar \n          value={ percentage } \n          strokeWidth={ 4 }\n          styles={buildStyles({\n            pathColor: '#6f2da8',\n            trailColor: '#292929',\n          })}\n          />\n        </div>\n        <div className=\"timer-container\">\n          <h1 className=\"hero-title\">Timer</h1>\n          <div className=\"time-container\">\n            <h1>\n              {`${'00'.slice(minutes.length) + minutes}:${'00'.slice(seconds.length) + seconds}`}\n            </h1>\n          </div>\n          <div className=\"control-painel\">\n            { isTimerActive \n            ? \n              <button\n                onClick={ this.pauseTimer }\n              >\n                <BsPlayFill />\n              </button>\n            :\n              <button\n                onClick={ this.startCountdown }\n              >\n                <BsPauseFill />\n              </button>\n            }\n            <button\n              onClick={ this.stopTimer }\n            >\n              <BsStopFill />\n            </button>\n            <button\n              disabled={ isTimerActive }\n              onClick={() => {\n                this.addQuantity(5)\n              }}\n            >\n              +5\n            </button>\n            <button\n              disabled={ isTimerActive }\n              onClick={() => {\n                this.addQuantity(10)\n              }}\n            >\n              +10\n            </button>\n            <button\n              disabled={ isTimerActive }\n              onClick={ this.togleSearch }\n            >\n              <FaSearch />\n            </button>\n          </div>\n          <div className=\"search-container\">\n            { search &&\n\n              <input\n                type=\"text\"\n                name=\"textSearch\"\n                value={ textSearch }\n                placeholder=\"00:00\"\n                onChange={ this.handleChange }\n                onKeyUp={ this.searchEnter }\n              />\n            }\n          </div>\n        </div>\n      </>\n    );\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}